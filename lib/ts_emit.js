// Generated by IcedCoffeeScript 108.0.11
(function() {
  var BaseEmitter, TypescriptEmitter, path_lib, pkg, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  path_lib = require('path');

  BaseEmitter = require('./base_emitter').BaseEmitter;

  pkg = require('../package.json');

  _ = require('lodash');

  exports.TypescriptEmitter = TypescriptEmitter = (function(_super) {
    __extends(TypescriptEmitter, _super);

    function TypescriptEmitter() {
      TypescriptEmitter.__super__.constructor.apply(this, arguments);
      this._tab_char = " ".repeat(2);
    }

    TypescriptEmitter.prototype.emit_preface = function(infiles, _arg) {
      var doc, infile, line, namespace, _i, _j, _len, _len1, _ref;
      namespace = _arg.namespace, doc = _arg.doc;
      this.output("/*");
      this.output(" * " + namespace);
      if (doc != null) {
        _ref = doc.split(/\n/);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          this.output(" * " + line.replace(/^\s$/, ''));
        }
      }
      this.output(" *");
      this.output(" * Auto-generated to TypeScript types by " + pkg.name + " v" + pkg.version + " (" + pkg.homepage + ")");
      this.output(" * Input files:");
      for (_j = 0, _len1 = infiles.length; _j < _len1; _j++) {
        infile = infiles[_j];
        this.output(" * - " + (path_lib.relative(process.cwd(), infile)));
      }
      this.output(" */");
      return this.output("");
    };

    TypescriptEmitter.prototype.output_doc = function(doc) {
      var line, _i, _len, _ref;
      if (doc != null) {
        this.output("/**");
        _ref = doc.split(/\n/);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          this.output(" * " + line.replace(/^\s$/, ''));
        }
        return this.output(" */");
      }
    };

    TypescriptEmitter.prototype.convert_primitive_type = function(type) {
      var map;
      map = {
        bool: "boolean",
        bytes: "Buffer",
        long: "number",
        float: "number",
        double: "number",
        uint: "number",
        int: "number",
        uint64: "number",
        int64: "number"
      };
      return map[type] || type;
    };

    TypescriptEmitter.prototype.make_map_type = function(type) {
      return "{[key: string]: " + (this.emit_field_type(type.values).type) + "}";
    };

    TypescriptEmitter.prototype.emit_field_type = function(t) {
      var optional, type;
      optional = false;
      type = typeof t === 'string' ? this.convert_primitive_type(t) : typeof t === 'object' ? Array.isArray(t) ? t[0] == null ? (optional = true, this.emit_field_type(t[1]).type) : "ERROR" : t.type === "array" ? this.emit_field_type(t.items).type + "[]" : t.type === "map" ? this.make_map_type(t) : "ERROR" : "ERROR";
      return {
        type: type,
        optional: optional
      };
    };

    TypescriptEmitter.prototype.emit_typedef = function(type) {
      this.output("export type " + type.name + " = " + (this.emit_field_type(type.typedef).type));
      return this.output("");
    };

    TypescriptEmitter.prototype.emit_imports = function(_arg) {
      var import_as, imports, imports_to_emit, path, _i, _len, _ref;
      imports = _arg.imports;
      imports = _.uniqWith(imports, _.isEqual);
      imports_to_emit = imports.filter(function(imp) {
        return imp.path.indexOf('/') >= 0;
      });
      for (_i = 0, _len = imports_to_emit.length; _i < _len; _i++) {
        _ref = imports_to_emit[_i], import_as = _ref.import_as, path = _ref.path;
        if (import_as) {
          this.output("import * as " + import_as + " from '" + path + "'");
        }
      }
      if (imports_to_emit.length > 0) {
        return this.output("");
      }
    };

    TypescriptEmitter.prototype.emit_fixed = function(type) {
      return this.output("export type " + type.name + " = string | null");
    };

    TypescriptEmitter.prototype.emit_field = function(_arg) {
      var name, optional, type, _ref;
      name = _arg.name, type = _arg.type;
      _ref = this.emit_field_type(type), type = _ref.type, optional = _ref.optional;
      return this.output("" + name + (optional ? '?' : '') + ": " + type);
    };

    TypescriptEmitter.prototype.emit_record = function(record) {
      var f, _i, _len, _ref;
      this.output("export type " + record.name + " = {");
      this.tab();
      _ref = record.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        this.emit_field({
          name: f.name,
          type: f.type
        });
      }
      this.untab();
      return this.output("}");
    };

    TypescriptEmitter.prototype.emit_enum = function(type) {
      var e_name, e_num, s, _i, _j, _len, _ref, _ref1;
      this.output("export enum " + type.name + " {");
      this.tab();
      _ref = type.symbols;
      for (_ = _i = 0, _len = _ref.length; _i < _len; _ = ++_i) {
        s = _ref[_];
        _ref1 = s.split("_"), e_name = 2 <= _ref1.length ? __slice.call(_ref1, 0, _j = _ref1.length - 1) : (_j = 0, []), e_num = _ref1[_j++];
        e_name = e_name.join("_");
        this.output("" + e_name + " = " + e_num + ",");
      }
      this.untab();
      return this.output("}");
    };

    TypescriptEmitter.prototype.emit_variant = function(type) {
      var cases;
      cases = type.cases.map((function(_this) {
        return function(type_case) {
          var bodyStr, bodyType;
          if (type_case.label.def) {
            return null;
          }
          bodyType = (function() {
            switch (false) {
              case type_case.body !== null:
                return 'null';
              case typeof type_case.body !== 'string':
                return this.convert_primitive_type(type_case.body);
              case type_case.body.type !== 'array':
                return this.convert_primitive_type(type_case.body.items) + '[]';
              default:
                return '';
            }
          }).call(_this);
          bodyStr = type_case.body ? ", " + type_case.label.name + ": " + bodyType + " | null" : '';
          return "{ " + type["switch"].name + ": " + type["switch"].type + "." + type_case.label.name + bodyStr + " }";
        };
      })(this)).filter(Boolean);
      this.output("export type " + type.name + " = " + (cases.join(" | ")));
      return this.output("");
    };

    return TypescriptEmitter;

  })(BaseEmitter);

}).call(this);
