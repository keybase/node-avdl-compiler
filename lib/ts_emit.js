// Generated by IcedCoffeeScript 108.0.11
(function() {
  var TypescriptEmitter, path_lib, pkg;

  path_lib = require('path');

  pkg = require('../package.json');

  exports.TypescriptEmitter = TypescriptEmitter = (function() {
    function TypescriptEmitter() {
      this._code = [];
      this._tabs = 0;
    }

    TypescriptEmitter.prototype.tab = function() {
      return this._tabs++;
    };

    TypescriptEmitter.prototype.untab = function() {
      return this._tabs--;
    };

    TypescriptEmitter.prototype.tabs = function() {
      var i;
      return ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this._tabs; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push("  ");
        }
        return _results;
      }).call(this)).join("");
    };

    TypescriptEmitter.prototype.output = function(l, _arg) {
      var frag;
      frag = (_arg != null ? _arg : {}).frag;
      if (this._last_frag) {
        this._code[this._code.length - 1] += l;
        this._last_frag = false;
      } else {
        this._code.push(this.tabs() + l);
      }
      if (frag) {
        return this._last_frag = true;
      } else {
        if ((l === "}" || l === ")") && this._tabs === 0) {
          return this._code.push("");
        }
      }
    };

    TypescriptEmitter.prototype.emit_preface = function(_arg) {
      var infile;
      infile = _arg.infile;
      this.output("/*");
      this.output(" * Auto-generated to TypeScript by " + pkg.name + " v" + pkg.version + " (" + pkg.homepage + ")");
      this.output(" *   Input file: " + (path_lib.relative(process.cwd(), infile)));
      this.output(" */");
      return this.output("");
    };

    TypescriptEmitter.prototype.emit_imports = function(_arg) {
      var import_as, imports, path, _i, _len, _ref, _results;
      imports = _arg.imports;
      _results = [];
      for (_i = 0, _len = imports.length; _i < _len; _i++) {
        _ref = imports[_i], import_as = _ref.import_as, path = _ref.path;
        _results.push(console.log(import_as, path));
      }
      return _results;
    };

    TypescriptEmitter.prototype.run = function(_arg) {
      var infile, json, types_only;
      infile = _arg.infile, json = _arg.json, types_only = _arg.types_only;
      this.emit_preface({
        infile: infile
      });
      this.emit_imports(json);
      return this._code;
    };

    return TypescriptEmitter;

  })();

}).call(this);
