// Generated by IcedCoffeeScript 108.0.11
(function() {
  var GoEmitter, Main, PythonEmitter, TypescriptEmitter, avdl2json, emit, exec, fs, iced, make_esc, mergeWith, merge_asts, minimist, output, pathmod, usage, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  minimist = require('minimist');

  avdl2json = require('avdl2json');

  GoEmitter = require('./go_emit').GoEmitter;

  TypescriptEmitter = require('./ts_emit').TypescriptEmitter;

  PythonEmitter = require('./py_emit').PythonEmitter;

  make_esc = require('iced-error').make_esc;

  fs = require('fs');

  pathmod = require('path');

  mergeWith = require('lodash').mergeWith;

  exec = require('child_process').exec;

  usage = function() {
    return console.error("AVDL Compiler\n\n" + '  ' + "single file: avdlc -l <lang> [-t] [-m] -i <infile> -o <outfile>\n" + '  ' + "batch:       avdlc -l <lang> [-t] [-m] -b -o <outdir> <infiles...>\n\navdlc can run in either batch or single-file mode. Specify which language\nto output code in. Currently, only \"go\" is fully supported. TypeScript and Python are partially supported.\n\nUse -t to only print types and ignore function definitions.\nUse -m to set gomodules support");
  };

  emit = function(_arg, cb) {
    var code, emitter, gomod_dir, gomod_path, infiles, json, lang, outfile, types_only;
    infiles = _arg.infiles, outfile = _arg.outfile, json = _arg.json, lang = _arg.lang, types_only = _arg.types_only, gomod_path = _arg.gomod_path, gomod_dir = _arg.gomod_dir;
    emitter = (function() {
      switch (lang) {
        case "go":
          return new GoEmitter(gomod_path, gomod_dir);
        case "typescript":
          return new TypescriptEmitter();
        case "python":
          return new PythonEmitter();
        default:
          throw new Error("Unrecognized language: " + this.lang);
      }
    }).call(this);
    code = emitter.run({
      infiles: infiles,
      outfile: outfile,
      json: json,
      options: {
        types_only: types_only
      }
    });
    return cb(null, code);
  };

  output = function(_arg, cb) {
    var code, err, outfile, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    outfile = _arg.outfile, code = _arg.code;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced"
        });
        fs.writeFile(outfile, code.join("\n"), __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 41
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

  merge_asts = function(ast1, ast2) {
    return mergeWith(ast1, ast2, function(value1, value2) {
      if (Array.isArray(value1)) {
        return value1.concat(value2);
      } else {
        return void 0;
      }
    });
  };

  exports.Main = Main = (function() {
    function Main() {}

    Main.prototype.parse_argv = function(_arg, cb) {
      var argv, err;
      argv = _arg.argv;
      argv = minimist(argv);
      if (argv.h) {
        usage();
        err = new Error("usage: shown!");
      } else if ((this.batch = argv.b)) {
        this.types_only = argv.t;
        this.gomod_enabled = argv.m;
        this.outdir = argv.o;
        this.infiles = argv._;
        if (!((this.outdir != null) && this.infiles.length)) {
          err = new Error("need an [-o <outdir>] and input files in batch mode");
        }
      } else {
        this.types_only = argv.t;
        this.gomod_enabled = argv.m;
        this.outfile = argv.o;
        this.infile = argv.i;
        if (!((this.outfile != null) && (this.infile != null))) {
          err = new Error("need an [-i <infile>] and a [-o <outfile>]");
        }
      }
      if ((argv.l == null) || !argv.l.match(/^(go|typescript|python)$/)) {
        err = new Error("must specify a language; candidates are: {'go', 'typescript', 'python'}");
      } else {
        this.lang = argv.l;
      }
      this.clean = argv.c;
      return cb(err);
    };

    Main.prototype.make_outfile = function(f) {
      var extension;
      extension = (function() {
        switch (this.lang) {
          case "typescript":
            return ".ts";
          case "go":
            return ".go";
          case "py":
            return ".py";
          default:
            throw new Error("Unrecognized language: " + this.lang);
        }
      }).call(this);
      return pathmod.join(this.outdir, (pathmod.basename(f, '.avdl')) + extension);
    };

    Main.prototype.skip_infile = function(_arg, cb) {
      var err, esc, infile, outfile, s0, s1, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      infile = _arg.infile, outfile = _arg.outfile;
      esc = make_esc(cb, "skip_infile");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
            funcname: "Main.skip_infile"
          });
          fs.stat(infile, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return s0 = arguments[0];
              };
            })(),
            lineno: 104
          })));
          fs.stat(outfile, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return s1 = arguments[1];
              };
            })(),
            lineno: 105
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, !(typeof err !== "undefined" && err !== null) && (s0.mtime <= s1.mtime));
        };
      })(this));
    };

    Main.prototype.get_gomod = function(opts, cb) {
      var cwd, esc, stdout, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "get_gomod");
      cwd = this.outdir != null ? this.outdir : pathmod.dirname(this.outfile);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
            funcname: "Main.get_gomod"
          });
          exec('go list -m -json', {
            cwd: cwd
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return stdout = arguments[0];
              };
            })(),
            lineno: 113
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.gomod_path = JSON.parse(stdout).Path;
          _this.gomod_dir = JSON.parse(stdout).Dir;
          return cb(null);
        };
      })(this));
    };

    Main.prototype.do_file = function(_arg, cb) {
      var ast, code, err, esc, infile, outfile, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      infile = _arg.infile, outfile = _arg.outfile;
      esc = make_esc(cb, "do_file");
      (function(_this) {
        return (function(__iced_k) {
          if (_this.clean) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                funcname: "Main.do_file"
              });
              fs.unlink(outfile, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 123
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err === "undefined" || err === null ? console.log("Deleting " + outfile) : void 0);
            });
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                funcname: "Main.do_file"
              });
              avdl2json.parse({
                infile: infile,
                version: 2
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return ast = arguments[0];
                  };
                })(),
                lineno: 126
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                  funcname: "Main.do_file"
                });
                emit({
                  infiles: [infile],
                  outfile: outfile,
                  json: ast.to_json(),
                  types_only: _this.types_only,
                  lang: _this.lang,
                  gomod_path: _this.gomod_path,
                  gomod_dir: _this.gomod_dir
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return code = arguments[0];
                    };
                  })(),
                  lineno: 127
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                    funcname: "Main.do_file"
                  });
                  output({
                    code: code,
                    outfile: outfile
                  }, esc(__iced_deferrals.defer({
                    lineno: 128
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(console.log("Compiling " + infile + " -> " + outfile));
                });
              });
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Main.prototype.do_files_as_one = function(_arg, cb) {
      var ast, code, esc, infile, json, outfile, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      outfile = _arg.outfile;
      esc = make_esc(cb, "do_files_as_one");
      json = {};
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = _this.infiles;
          _len = _ref.length;
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _len)) {
              return _break();
            } else {
              infile = _ref[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                  funcname: "Main.do_files_as_one"
                });
                avdl2json.parse({
                  infile: infile,
                  version: 2
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return ast = arguments[0];
                    };
                  })(),
                  lineno: 141
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(merge_asts(json, ast.to_json()));
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
              funcname: "Main.do_files_as_one"
            });
            emit({
              infiles: _this.infiles,
              json: json,
              outfile: outfile,
              types_only: true,
              lang: _this.lang,
              gomod_path: _this.gomod_path,
              gomod_dir: _this.gomod_dir
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return code = arguments[0];
                };
              })(),
              lineno: 143
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                funcname: "Main.do_files_as_one"
              });
              output({
                code: code,
                outfile: outfile
              }, esc(__iced_deferrals.defer({
                lineno: 144
              })));
              __iced_deferrals._fulfill();
            })(function() {
              console.log("Compiling " + _this.infiles + " -> " + outfile);
              return cb(null);
            });
          });
        };
      })(this));
    };

    Main.prototype.do_batch_mode = function(opts, cb) {
      var esc, infile, outfile, skip, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "do_batch_mode");
      (function(_this) {
        return (function(__iced_k) {
          switch (_this.lang) {
            case "go":
              (function(__iced_k) {
                var _i, _len, _ref, _results, _while;
                _ref = _this.infiles;
                _len = _ref.length;
                _i = 0;
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = __iced_k;
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_i;
                      return _while(__iced_k);
                    });
                  };
                  _next = _continue;
                  if (!(_i < _len)) {
                    return _break();
                  } else {
                    infile = _ref[_i];
                    outfile = _this.make_outfile(infile);
                    skip = false;
                    (function(__iced_k) {
                      if (!_this.clean) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                            funcname: "Main.do_batch_mode"
                          });
                          _this.skip_infile({
                            infile: infile,
                            outfile: outfile
                          }, esc(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return skip = arguments[0];
                              };
                            })(),
                            lineno: 159
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(function() {
                      (function(__iced_k) {
                        if (!skip) {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                              funcname: "Main.do_batch_mode"
                            });
                            _this.do_file({
                              infile: infile,
                              outfile: outfile
                            }, esc(__iced_deferrals.defer({
                              lineno: 161
                            })));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        } else {
                          return __iced_k();
                        }
                      })(_next);
                    });
                  }
                };
                _while(__iced_k);
              })(__iced_k);
              break;
            case "typescript":
              outfile = pathmod.join(_this.outdir, 'index.ts');
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                  funcname: "Main.do_batch_mode"
                });
                _this.do_files_as_one({
                  outfile: outfile
                }, esc(__iced_deferrals.defer({
                  lineno: 164
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            case "python":
              outfile = pathmod.join(_this.outdir, '__init__.py');
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                  funcname: "Main.do_batch_mode"
                });
                _this.do_files_as_one({
                  outfile: outfile
                }, esc(__iced_deferrals.defer({
                  lineno: 167
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            default:
              throw new Error("Unrecognized language: " + _this.lang);
              return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Main.prototype.main = function(_arg, cb) {
      var argv, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      argv = _arg.argv;
      esc = make_esc(cb, "main");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
            funcname: "Main.main"
          });
          _this.parse_argv({
            argv: argv
          }, esc(__iced_deferrals.defer({
            lineno: 176
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this.gomod_enabled) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                  funcname: "Main.main"
                });
                _this.get_gomod({}, esc(__iced_deferrals.defer({
                  lineno: 178
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              if (_this.batch) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                    funcname: "Main.main"
                  });
                  _this.do_batch_mode({}, esc(__iced_deferrals.defer({
                    lineno: 180
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
                    funcname: "Main.main"
                  });
                  _this.do_file({
                    infile: _this.infile,
                    outfile: _this.outfile
                  }, esc(__iced_deferrals.defer({
                    lineno: 182
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              }
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    return Main;

  })();

  exports.main = function() {
    var err, main, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    main = new Main;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/marcel/Documents/node-avdl-compiler/src/main.iced",
          funcname: "main"
        });
        main.main({
          argv: process.argv.slice(2)
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 189
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        rc = 0;
        if (typeof err !== "undefined" && err !== null) {
          rc = -2;
          console.error(err.toString().red);
        }
        return process.exit(rc);
      };
    })(this));
  };

}).call(this);
